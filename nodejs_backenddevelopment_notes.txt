Model View Controller (MVC) 
- The framework is an architectural/design pattern that segregates an application into three main logical components Model, View, Controller
- It isolates the business logic and presentation layer from eachother
- It supports Test Driven Development

Components of MVC 
1. Controller
 - Handles request flow 
 - Never handles data logic
 - Model and view never interact with eachother, any interaction between the model and view are done through the controller 


2. Model 
  - This represent either the data that is being transferred between the view and controller components or any other business logic-related data
  - Interacts with database

3. View
 - Handles data presentation
 - Views are created by the data which is collected by the model component but these data aren't taken directly but through the controller
 - Dynamically rendered

Advantages
- Codes are easy to maintain and they can be extended easily
- The components of MVC can be developed simultaneously
- The MVC model component can be tested separately

Disadvantages
- It is not suitable for building small applications
- The inefficiency of data access in view

Application Programming Interface (API) 
- It is an interface that allows two systems to communicate with each other (share data and access resources)

Working 
- The client initiates the requests via the APIs URI
- The API makes a call to the server after receiving the request 
- Then the server sends the response back to the API with the information
- Finally, the API transfers the data to the client 

Advantages 
- Flexible delivery of services 
- Integration
- Automation

Disadvantages
- Cost 

Representational State Transfer (REST API) 
- It is an architectural style that defines a set of contraints to be used for creating web services 
- It is used to fetch or give some information from a web service 

Working 
- A request is sent from client to server in the form of a web URL as HTTP GET or POST or PUT or DELETE request 
- A response comes back from the server in the form of a resource 
- In HTTP there are five methods that are commonly used in REST-based Architecture i.e., POST, GET, PUT, PATCH, and DELETE

HTTP Methods 
- The HTTP specification includes a collection of methods that are used to interact with server-side resources
- There are commonly referred to as HTTP request methods or HTTP verbs and are intended to cover all possible types of interaction with resources  

Types 
1.GET
- The HTTP GET method is a type of HTTP request that is used to retrieve a representation of a resource from a server 
- A HTTP request of this type is sent to retrieve data, and there is no message body included
- The values are generally limited to 255 characters in length, and it only supports string data types 

2.HEAD 
- The HTTP HEAD method is a type of HTTP request that is identical to HTTP GET, except that the server will not return a message-body as part of the HTTP response 
- It can be used to obtain metadata for the resource without having to consume the bandwidth required to download the message body 
- This HTTP method can be used, for example, to test hyperlinks for validity and recent changes

3. OPTIONS
- The HTTP OPTIONS method is a type of HTTP request that is used to request information about the actions available for interacting with the target resource 
- A HTTP request of this type is sent to determine the capabilities that the server has or what interaction is allowed with a specific resource, without having to commit to a particular action 

4. TRACE 
- The HTTP TRACE request method is used to determine what changes, if any, are made between the client and server in the HTTP request chain 
- A HTTP request of this type is used for diagnostic purposes, and there is no message body. 
- The final recipient in the path will echo the message that it received, excluding any fields that are likely to contain sensitive data 

5. DELETE
- The HTTP DELETE method is a type of HTTP request that is used to delete a resource from the server 
- Precisely what happens on the server's side, such as whether the space is reclaimed or the resource is instead just taken offline, is under the control of the server, and how its environment has been configured

6. PUT 
- The HTTP PUT method is a type of HTTP request that creates or replaces a resource on the server with one that is included in the message body 
- The server will verify the specified representation is compatible with the constraints that the server has in place. If the representation is not consistent then the server will either reconfigure or transform it appropriately, or return an appropriate and explanatory error message 

7. POST 
- The HTTP POST is a type of HTTP request that is used to send data to a server and is typically utilized for interacting with a specific resource 
- The representation of the message body is indicated by the content-type header. Depending on its value, the server has different expectations as to how the message body is formatted 

8. PATCH 
- The HTTP PATCH method is a type of HTTP request that is used to modify a resource on the server 
- When the HTTP PATCH method is called, the client instructs the server to make changes to the specified resource. If the resource does not exist then it can be created, depending on the server configuration

9. CONNECT 
- The HTTP CONNECT request method is used to set up two-way communication between the client and the resource on the origin server, through one or more proxy servers.
- Once the HTTP connection is made, it is intended to be used for the forwarding of data packets in both directions 

HTTP Status Codes 
- A HTTP status code is a server response to a browser's request.

Common HTTP status code classes
1. 1xxs - Informational responses 
- The server is thinking through the request 

2. 2xxs - Success 
- The request was successfully completed and the server gave the browser the expected response 

3. 3xxs - Redirection 
The request was received, but there's a redirect of some kind 

4. 4xxs - Client errors
- The request was made, but the page isn't valid - this is an error on the website's side of the conversation and often appears when a page doesn't exist on the site 

5. 5xxs - Server errors 
- A valid request was made by the client but the server failed to complete the request 

Object Relational Mapping (ORM) 
- Object-relational mapping is a technique that connects programming code with relational databases. It uses metadata descriptors to create a layer between object-oriented program code and the database 
- It allows developers to perform CRUD opertions on databases without directly writing SQL code 
- ORM provides a higher level of abstraction and encapsulation, enabling developers to work with databases using OOP principles

Advantages 
- Simplifies and abstracts data access 
- Object-oriented programming paradigm
- Portablity and cross-platform support 
- Performance optimizations

Disadvantages
- Limited control over optimization 
- Complex mapping
- Increased resource usage 
- Maintenance challenges 

Sequelize 
- Sequelize is a promise based Node.js ORM tool for Postgres, MySQL, MariaDB, SQLite, Microsoft SQL Server, Oracle Database, Amazon Redshift and Snowflake's Data Cloud.
- It features solid transaction support, relations, eager and lazy loading, read replication and more 

Model Querying Basics
1. Simple insert queries 
- const jane = await User.create({ firstName: 'Jane', lastName: 'Doe'});

2. Simple select queries 
- const users = await User.findAll();

3. Specifying attributes for select queries
- Model.findAll({
  attributes :['foo','bar'],
});

4. Applying where clauses 
- Post.findAll({
  where : {
    authorId : 2,
  },
});

5. Operators 
- Post.findAll({
  where : {
    [Op.and]: [{ a: 5 }, { b: 6 }],
    [Op.or]: [{ a: 5 }, { b: 6 }],
    someAttribute: {
      [Op.eq]: 3,
      [Op.ne]: 20,
      [Op.is]: null,
      [Op.not]: true,
      [Op.or]: [5,6]
    }
  }
});

6. Logical combinations with operators
- Foo.findAll({
  where: {
    rank: {
      [Op.or]: {
        [Op.lt]: 1000,
        [Op.eq]: null
      }
    },
    {
      createdAt: {
        [Op.lt]: new Date(),
        [Op.gt]: new Date(new Date() - 24 * 60 * 60 * 1000)
      }
    },
    {
      [Op.or]: [
        {
          title: {
            [Op.like]: 'Boat%'
          }
        },
        {
          description: {
            [Op.like]: '%boat%'
          }
        }
      ]
    }
  }
});

7. Simple update queries
- await User.update({
  lastName: 'Doe' },
  {
    where: {
      lastName: null,
    },
  },
);

8. Simple delete queries 
- await User.destroy({
  where: {
    firstName: 'Jane',
  },
});

9. Creating in bulk
- const captians = await Captian.bulkCreate([{name: 'Jack Sparrow' }, {name: 'Davy Jones' }]);
  console.log(captions.length); //2
  console.log(captions[0] instanceof Captain); // true
  console.log(captians[0].name); // 'Jack Sparrow'
  console.log(captions[0].id); //1

10. Ordering 
- Subtask.findAll({
  order: [
    // Will escape title and validate DESC against a list of valid direction parameters
    ['title','DESC'],
    // Will order by max(age)
    sequelize.fn('max',sequelize.col('age')),
    // Will order by max(age) DESC  
    [sequelize.fn('max',sequelize.col('age')),'DESC'],
    // Will order by otherfunction('col1',12, 'lalala') DESC 
    [sequelize.fn('otherfunction',sequelize.col('col1'),12,'lalala'),'DESC'],
    // Will order an associated model's createdAt using the model name as the association's name 
    [Task, 'createdAt','DESC'],
    // Will order through an associated model's createdAt using the model names as the associations' names 
    [Task, Project,'createdAt','DESC'],
    // Will order by an associated model's createdAt using the name of the association 
    ['Task','createdAt','DESC'],
    // Will order by a nested associated model's createdAt using the names of the associations 
    ['Task','Project','createdAt','DESC']
    // Will order by an associated model's createdAt using an associated object 
    [Subtask.associations.Task, 'createdAt', 'DESC'],
    // Will order by a nested associated model's createdAt using association objects
    [Subtask.associations.Task, Task.associations.Project, 'createdAt','DESC'],
    // Will order by an associated model's createdAt using a simple association object 
    [{model: Task, as: 'Task' }, 'createdAt', 'DESC'],
    // Will order by a nested associated model's createdAt simple association objects 
    [{model: Task, as: 'Task' }, { model: Project, as: 'Project' }, 'createdAt','DESC'],
  ],
  // Will order by max age descending
  order: sequelize.literal('max(age) DESC'),
  // Will order by max age ascending assuming ascending is the default order when direction is omitted
  order: sequelize.fn('max',sequelize.col('age')),
  // Will order by age ascending assuming ascending is the default order when direction is omitted
  order: sequelize.col('age'),
  // Will order randomly based on the dialect 
  order: sequelize.random(),
});

Foo.findOne({
  order: [
    // will return 'name'
    ['name'],
    // will return 'username' DESC 
    ['username','DESC'],
    // will return max('age')
    sequelize.fn('max',sequelize.col('age'))
    // will return max('age') DESC 
    [sequelize.fn('max',sequelize.col('age')),'DESC']
    // will return otherfunction('col1',12,'lalala') DESC 
    [sequelize.fn('otherfunction',sequelize.col('col1'),12,'lalala'),'DESC'],
    // will return otherfunction(awesomefunction('col')) DESC, This nesting is potentially infinite!
    [sequelize.fn('otherfunction',sequelize.fn('awesomefunction',sequelize.col('col'))), 'DESC'],
  ],
});

11. Grouping 
- Project.findAll({ group: 'name'});

12. Limits and Pagination
- // Fetch 10 instances/rows 
  Project.findAll({limit: 10});
  // Skip 8 instances/rows 
  Project.findAll({offset: 8})
  // Skip 5 instances and fetch the 5 after that 
  Project.findAll({offset: 5, limit: 5})

13. Utility Methods 
- count 
 console.log(`There are ${await Project.count() projects`})
 const amount = await Project.count({
  where: {
    id: {
      [Op.gt]: 25,
    },
  },
 });
 console.log(`There are ${amount} projects with an id greater than 25`);

- max, min and sum  
 await User.max('age');
 await User.max('age',{ where: { age: { [Op.lt]: 20 } } });
 await User.min('age');
 await User.min('age',{ where: { age: { [Op.gt]: 5 } } });
 await User.sum('age');
 await User.sum('age',{ where: { age: { [Op.gt]: 5 } } });

- increment, decrement 
 await User.increment({ age: 5 }, { where: { id: 1 } });
 await User.increment({ age: -5 }, { where: {id: 1 } });